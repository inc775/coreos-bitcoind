#!/usr/bin/env bash
randgen() {
	output=$(tr -dc '0-9a-zA-Z!@#$%^&*_+-' < /dev/urandom | head "-c${1:-$1}") 2>/dev/null
	echo "$output"
}

random_user=$(randgen 32)
random_password=$(randgen 64)

# configure etcd
ETCD_PORT=${ETCD_PORT:-4001}
ETCD="$HOST:$ETCD_PORT"
ETCD_PATH=${ETCD_PATH:-/bitcoin/$NETWORK}
ETCD_TTL=${ETCD_TTL:-10}

# default values for env based configuration
export BITCOIN_RPCUSER="${BITCOIN_RPCUSER:-$random_user}"
export BITCOIN_RPCPASSWORD="${BITCOIN_RPCPASSWORD:-$random_password}"

if [ "$NETWORK" = "testnet" ]
then
	export BITCOIN_TESTNET=1
	export BITCOIN_PORT="${BITCOIN_PORT:-18333}"
	export BITCOIN_RPCPORT="${BITCOIN_RPCPORT:-18332}"
else
	export BITCOIN_TESTNET=0
	export BITCOIN_PORT="${BITCOIN_PORT:-8333}"
	export BITCOIN_RPCPORT="${BITCOIN_RPCPORT:-8332}"
fi

# check if etcd is available
if etcdctl --no-sync -C "$ETCD" ls >/dev/null 2>&1
then
	function etcd_safe_mkdir {
		etcdctl --no-sync -C "$ETCD" mkdir "$1" >/dev/null 2>&1 || true
	}

	function etcd_set_default {
		etcdctl --no-sync -C "$ETCD" mk "$ETCD_PATH/$1" "$2" >/dev/null 2>&1 || true
	}

	etcd_safe_mkdir "$ETCD_PATH"
	etcd_set_default rpcuser "$random_user"
	etcd_set_default rpcpassword "$random_password"
	etcd_set_default testnet "$BITCOIN_TESTNET"
	etcd_set_default port "$BITCOIN_PORT"
	etcd_set_default rpcport "$BITCOIN_RPCPORT"

	# wait for confd to run once and install initial templates
	PREFIX="${ETCD_PATH}/"
	until confd -onetime -node "$ETCD" -prefix "$PREFIX"; do
		echo "Waiting for confd to write bitcoin.conf..."
		sleep $((ETCD_TTL/2)) # sleep for half the TTL
	done

	# spawn bitcoind in background
	echo "Starting Bitcoind..."
	bitcoind-service start || exit 1

	# spawn confd in the background to update services based on etcd changes
	confd -node "$ETCD" -prefix "$PREFIX" -reload_cmd="bitcoind-service restart" &
	# CONFD_PID=$!
else
	echo "rpcuser=$BITCOIN_RPCUSER"
	echo "rpcpassword=$BITCOIN_RPCPASSWORD"
	# Generate config from environment variables
	confd -onetime -backend env -prefix "/bitcoin/"
	bitcoind-service start || exit 1
fi

wait
